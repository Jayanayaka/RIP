package {{package}}.util;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.log4j.Logger;

public class JsonUtility {

    private static final Logger log = Logger.getLogger(JsonUtility.class);

    private static final JsonFactory jsonFactory;
    private static ObjectMapper objectMapper;
    private static final DateFormat dateFormat;


    static {
        jsonFactory = new JsonFactory();
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    }

    public static void initialize() {
        objectMapper = new ObjectMapper(jsonFactory);
        objectMapper.getSerializationConfig().with(dateFormat);
        objectMapper.getDeserializationConfig().with(dateFormat);
    }
    
    public static synchronized <T extends Object> T stringToObject(String jsonString, Class<T> jsonObjectType) {

        T jsonObject = null;

        try {
            jsonObject = objectMapper.readValue(jsonString, jsonObjectType);
        } catch (JsonParseException e) {
            log.error(e.getMessage(), e);
        } catch (JsonMappingException e) {
            log.error(e.getMessage(), e);
        } catch (IOException e) {
            log.error(e.getMessage(), e);
        }

        return jsonObject;

    }

    public static synchronized String objectToString(Object jsonObject) {

        String jsonString = null;

        try {
            jsonString = objectMapper.writeValueAsString(jsonObject);
        } catch (JsonGenerationException e) {
            log.error(e.getMessage(), e);
        } catch (JsonMappingException e) {
            log.error(e.getMessage(), e);
        } catch (IOException e) {
            log.error(e.getMessage(), e);
        }

        return jsonString;

    }

}